diff -u content/@tezzutezzu/world-history-timeline/v6.7.0/index.html content/@tezzutezzu/world-history-timeline/v3.5.17/index.html
--- content/@tezzutezzu/world-history-timeline/v6.7.0/index.html	2022-01-28 19:06:07.863760285 +0000
+++ content/@tezzutezzu/world-history-timeline/v3.5.17/index.html	2022-01-28 19:06:07.863760285 +0000
@@ -1,4 +1,4 @@
 <div id="chart"></div>
-<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/6.7.0/d3.min.js"></script>
+<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
 <link rel="stylesheet" href="style.css">
 <script src="script.js"></script>
\ No newline at end of file
diff -u content/@tezzutezzu/world-history-timeline/v6.7.0/script.js content/@tezzutezzu/world-history-timeline/v3.5.17/script.js
--- content/@tezzutezzu/world-history-timeline/v6.7.0/script.js	2022-01-28 19:06:07.863760285 +0000
+++ content/@tezzutezzu/world-history-timeline/v3.5.17/script.js	2022-01-28 19:06:07.863760285 +0000
@@ -31,7 +31,7 @@
 
   el.append("rect")
     .attr("x", sx)
-    .attr("height", yPositionScale.bandwidth())
+    .attr("height", yPositionScale.rangeBand())
     .attr("width", w)
     .attr("fill", d.color);
 
@@ -57,32 +57,35 @@
   .append("g")
   .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
-const yPositionScale = d3.scaleBand().range([0, height]).padding(0.2);
+const yPositionScale = d3.scale.ordinal().rangeRoundBands([0, height], 0.2);
 
-const xPositionScale = d3.scaleLinear().range([0, width]);
+const xPositionScale = d3.scale.linear().range([0, width]);
 
-const colorScale = d3.scaleOrdinal(d3.schemeSet2);
+const colorScale = d3.scale.ordinal().range(['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3']);
 const formatDate = (d) => (d < 0 ? `${-d}BC` : `${d}AD`);
 
 const axisBottom = d3
-  .axisBottom(xPositionScale)
-  .tickPadding(2)
-  .tickFormat(formatDate);
+  .svg.axis().orient('bottom').scale(xPositionScale);
 
 const axisTop = d3
-  .axisTop(xPositionScale)
-  .tickPadding(2)
-  .tickFormat(formatDate);
-
-d3.csv("civilization timelines - civilization timelines.csv", function (d) {
-  return {
-    ...d,
-    start: +d.start,
-    end: +d.end,
-  };
-}).then(ready);
+  .svg.axis().orient('top').scale(xPositionScale);
+
+// const axisTop = d3
+//   .axis.top(xPositionScale)
+//   .tickPadding(2)
+//   .tickFormat(formatDate);
+
+d3.csv("civilization timelines - civilization timelines.csv", ready);
+
+function ready(error, datapoints) {
+  datapoints = datapoints.map(d => {
+    return {
+      ...d,
+      start: +d.start,
+      end: +d.end,
+    }
+  })
 
-function ready(datapoints) {
   datapoints = datapoints.sort((a, b) => a.start - b.start);
 
   xPositionScale.domain([
@@ -93,26 +96,32 @@
   yPositionScale.domain(d3.range(datapoints.length));
 
   const dataByTimeline = d3
-    .group(datapoints, d => d.timeline);
+    .nest()
+    .key((d) => d.timeline)
+    .entries(datapoints);
 
   const dataByRegion = d3
-    .group(datapoints, d => d.region);
-
+    .nest()
+    .key((d) => d.region)
+    .entries(datapoints);
+  
   const regions = d3
-    .group(datapoints, d => d.region)
-    .keys()
-
-  colorScale.domain(regions);
+    .nest()
+    .key((d) => d.region)
+    .entries(datapoints)
+    .map((d) => d.key);
 
-  const timelines = dataByTimeline.keys()
+  const timelines = dataByTimeline.map((d) => d.key);
 
   let filteredData;
   filteredData = [].concat.apply(
     [],
-    [...dataByRegion.values()]
+    dataByRegion.map((d) => d.values)
   );
+  console.log(dataByRegion.map((d) => d.values))
+  console.log(filteredData)
 
-  filteredData.forEach((d) => (d.color = d3.color(colorScale(d.region))));
+  filteredData.forEach((d) => (d.color = colorScale(d.region)));
 
   const groups = svg
     .selectAll("g")
